#ifndef _BIND_H_
#define _BIND_H_

/* define a reflected class with optional bindings */
#define CLASS(CLASS_NAME, SUPER_CLASS_NAME, BINDING1, BINDING2) \
	RX_CLASS(CLASS_NAME, SUPER_CLASS_NAME) \
	BINDING1##_CLASS_DEFAULT(CLASS_NAME, SUPER_CLASS_NAME) \
	BINDING2##_CLASS_DEFAULT(CLASS_NAME, SUPER_CLASS_NAME)

#define _CLASS_DEFAULT(CLASS_NAME, SUPER_CLASS_NAME) // nothing
#define net_CLASS_DEFAULT(CLASS_NAME, SUPER_CLASS_NAME) DEFINE_NET_CLASS(CLASS_NAME, SUPER_CLASS_NAME)
#define lua_CLASS_DEFAULT(CLASS_NAME, SUPER_CLASS_NAME) DEFINE_LUA_CLASS(CLASS_NAME, SUPER_CLASS_NAME)
#define reg_CLASS_DEFAULT(CLASS_NAME, SUPER_CLASS_NAME) CLASS_NAME##(const char * name) : SUPER_CLASS_NAME##(name) {}

/* todo define a reflected class with optional bindings and multiple inheritance */
#define CLASS_MI(CLASS_NAME, SUPER_CLASS_NAMES, BINDING1, BINDING2) \
	enum{ value = false } multiple_inheritance; \
	CLASS(CLASS_NAME, GET_FIRST_CLASS(SUPER_CLASS_NAMES), BINDING1, BINDING2)

#define GET_FIRST_CLASS(CLASS1, CLASS2) CLASS1
	

/* implement a reflected class with optional bindings */
#define IMPLEMENT_CLASS(CLASS_NAME, BINDING1, BINDING2) \
	BINDING1##_IMPLEMENT_DEFAULT(CLASS_NAME) \
	BINDING2##_IMPLEMENT_DEFAULT(CLASS_NAME)

#define _IMPLEMENT_DEFAULT(CLASS_NAME) // nothing
#define net_IMPLEMENT_DEFAULT(CLASS_NAME) IMPLEMENT_NET_CLASS(CLASS_NAME)
#define lua_IMPLEMENT_DEFAULT(CLASS_NAME) IMPLEMENT_LUA_CLASS(CLASS_NAME)
#define serialize_IMPLEMENT_DEFAULT(CLASS_NAME) IMPLEMENT_SERIALIZATION_CLASS(CLASS_NAME)

/* define a reflected default property with optional bindings */
/*#define DEFAULT_PROPERTY(TYPE, NAME, BINDING1, BINDING2) \
	BINDING1##_PROPERTY_DEFAULT(TYPE, NAME) \
	BINDING2##_PROPERTY_DEFAULT(TYPE, NAME) \
	RX_DEFAULT_PROPERTY(TYPE, NAME)

#define _PROPERTY_DEFAULT(TYPE, NAME) // nothing
#define net_PROPERTY_DEFAULT(TYPE, NAME) NET_DEFAULT_PROPERTY(TYPE, NAME)
#define lua_PROPERTY_DEFAULT(TYPE, NAME) LUA_DEFAULT_PROPERTY(TYPE, NAME)*/

/* define a reflected method with optional bindings */
#define METHOD(ACCESS_ATTR, RETURN_TYPE, METHOD_NAME, METHOD_ARGS, BINDING1, BINDING2) \
	BINDING1##_METHOD_DEFAULT(ACCESS_ATTR, RETURN_TYPE, METHOD_NAME, METHOD_ARGS) \
	BINDING2##_METHOD_DEFAULT(ACCESS_ATTR, RETURN_TYPE, METHOD_NAME, METHOD_ARGS) \
	RX_METHOD(ACCESS_ATTR, RETURN_TYPE, METHOD_NAME, METHOD_ARGS)

#define _METHOD_DEFAULT(ACCESS_ATTR, RETURN_TYPE, METHOD_NAME, METHOD_ARGS) // nothing
#define lua_METHOD_DEFAULT(ACCESS_ATTR, RETURN_TYPE, METHOD_NAME, METHOD_ARGS) LUA_METHOD(ACCESS_ATTR, RETURN_TYPE, METHOD_NAME, METHOD_ARGS)

/* define a reflected event with optional bindings */
#define EVENT(ACCESS_ATTR, EVENT_NAME, ARGS, BINDING1, BINDING2) \
	RX_EVENT(ACCESS_ATTR, EVENT_NAME, ARGS); \
	BINDING1##_EVENT_DEFAULT(ACCESS_ATTR, EVENT_NAME, ARGS) \
	BINDING2##_EVENT_DEFAULT(ACCESS_ATTR, EVENT_NAME, ARGS)

#define _EVENT_DEFAULT(ACCESS_ATTR, EVENT_NAME, ARGS) // nothing
#define lua_EVENT_DEFAULT(ACCESS_ATTR, EVENT_NAME, ARGS) LUA_EVENT(ACCESS_ATTR, EVENT_NAME, ARGS)


#endif // _BIND_H_