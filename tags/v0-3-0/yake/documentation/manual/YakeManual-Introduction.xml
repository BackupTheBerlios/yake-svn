<article>
	<title>Introduction</title>
	<articleinfo>
		<title>Introduction</title>
	</articleinfo>
	<toc></toc>
	<sect1>
		<title>Introduction</title>
		<para>Yake is a light-weight and powerful, object-oriented and cross-platform application framework written in C++.  While originally targetted towards games other types of applications can also benefit from Yake.  We, the Yake developers, think that an additional dependency to a project should be as non-intrusive as possible. That approach enables developers to decide at any time whether to use the whole or just a subset of Yake&apos;s functionality.</para>
	</sect1>
	<sect1>
		<title>Features</title>
		<para>Yake 0.1 provides functionality in the following areas: </para>
		<itemizedlist>
			<listitem>
				<para>functionality for math, containers, signals, factories, ...</para>
			</listitem>
			<listitem>
				<para>system interfaces with any amount of pluggable implementations for graphics, physics, scripting and input systems</para>
			</listitem>
		</itemizedlist>
		<para>Yake 0.2 will add the following features:</para>
		<itemizedlist>
			<listitem>
				<para>specialized systems for GUI and VFS</para>
			</listitem>
			<listitem>
				<para>system interfaces with any amount of pluggable implementations for audio and collision detection systems</para>
			</listitem>
			<listitem>
				<para>serialization and persistance</para>
			</listitem>
			<listitem>
				<para>room for future optimizations (containers, converters, ...)</para>
			</listitem>
		</itemizedlist>
		<para>Yake 0.3 adds these features:</para>
		<itemizedlist>
			<listitem>
				<para>system interfaces with any amount of pluggable implementations for network system</para>
			</listitem>
			<listitem>
				<para>resource management</para>
			</listitem>
			<listitem>
				<para>reflection (static, dynamic)</para>
			</listitem>
			<listitem>
				<para>replication (distributed networked objects)</para>
			</listitem>
		</itemizedlist>
		<para>Currently the following <emphasis role="bold">plugins</emphasis> exist and are maintained by the Yake Team. They can be replaced by other implementations or you can run them in parallel if you really want to.
		</para>
		<itemizedlist>
			<listitem>
				<para>graphics system: based on OGRE (Object-Oriented Graphics Rendering Engine), a cross-platform  multi-purpose rendering engine.</para>
			</listitem>
			<listitem>
				<para>audio system: based on OpenAL++</para>
			</listitem>
			<listitem>
				<para>physics system: based on OpenDE (Open Dynamics Engine)</para>
			</listitem>
			<listitem>
				<para>scripting system: based on Lua and Luabind</para>
			</listitem>
			<listitem>
				<para>input system: based on OGRE</para>
			</listitem>
		</itemizedlist>
	</sect1>
	<sect1>
		<title>About this manual</title>
		<para>The latest version of this manual can be found at http://yake.org.</para>
		<para>As it is now, this manual is work-in-progress. It is not (yet) intended to document each and  every feature. We started to work on the most pressing things first, mainly Yake&apos;s architecture  and Quick Start Guides to different, often used feature sets.</para>
		<para>This manual is intended to serve as a reference in addition to the Yake API Documentation and the samples  shipping with Yake. </para>
		<para>That said, have fun :)</para>
		<para>The Yake Team</para>
	</sect1>
</article>
